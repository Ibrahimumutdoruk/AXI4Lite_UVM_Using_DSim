// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module sumermcu_gpio_reg (
        input wire clk,
        input wire rst,

        AXI_LITE.Slave s_axil,

        input sumermcu_gpio_reg_pkg::sumermcu_gpio_reg__in_t hwif_in,
        output sumermcu_gpio_reg_pkg::sumermcu_gpio_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [2:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    `ifndef SYNTHESIS
        initial begin
            assert($bits(s_axil.ar_addr) >= sumermcu_gpio_reg_pkg::SUMERMCU_GPIO_REG_MIN_ADDR_WIDTH)
                else $error("Interface address width of %0d is too small. Shall be at least %0d bits", $bits(s_axil.ar_addr), sumermcu_gpio_reg_pkg::SUMERMCU_GPIO_REG_MIN_ADDR_WIDTH);
            assert($bits(s_axil.w_data) == sumermcu_gpio_reg_pkg::SUMERMCU_GPIO_REG_DATA_WIDTH)
                else $error("Interface data width of %0d is incorrect. Shall be %0d bits", $bits(s_axil.w_data), sumermcu_gpio_reg_pkg::SUMERMCU_GPIO_REG_DATA_WIDTH);
        end
    `endif

    // Max Outstanding Transactions: 2
    logic [1:0] axil_n_in_flight;
    logic axil_prev_was_rd;
    logic axil_arvalid;
    logic [2:0] axil_araddr;
    logic axil_ar_accept;
    logic axil_awvalid;
    logic [2:0] axil_awaddr;
    logic axil_wvalid;
    logic [31:0] axil_wdata;
    logic [3:0] axil_wstrb;
    logic axil_aw_accept;
    logic axil_resp_acked;

    // Transaction request acceptance
    always_ff @(posedge clk) begin
        if(rst) begin
            axil_prev_was_rd <= '0;
            axil_arvalid <= '0;
            axil_araddr <= '0;
            axil_awvalid <= '0;
            axil_awaddr <= '0;
            axil_wvalid <= '0;
            axil_wdata <= '0;
            axil_wstrb <= '0;
            axil_n_in_flight <= '0;
        end else begin
            // AR* acceptance register
            if(axil_ar_accept) begin
                axil_prev_was_rd <= '1;
                axil_arvalid <= '0;
            end
            if(s_axil.ar_valid && s_axil.ar_ready) begin
                axil_arvalid <= '1;
                axil_araddr <= s_axil.ar_addr;
            end

            // AW* & W* acceptance registers
            if(axil_aw_accept) begin
                axil_prev_was_rd <= '0;
                axil_awvalid <= '0;
                axil_wvalid <= '0;
            end
            if(s_axil.aw_valid && s_axil.aw_ready) begin
                axil_awvalid <= '1;
                axil_awaddr <= s_axil.aw_addr;
            end
            if(s_axil.w_valid && s_axil.w_ready) begin
                axil_wvalid <= '1;
                axil_wdata <= s_axil.w_data;
                axil_wstrb <= s_axil.w_strb;
            end

            // Keep track of in-flight transactions
            if((axil_ar_accept || axil_aw_accept) && !axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight + 1'b1;
            end else if(!(axil_ar_accept || axil_aw_accept) && axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight - 1'b1;
            end
        end
    end

    always_comb begin
        s_axil.ar_ready = (!axil_arvalid || axil_ar_accept);
        s_axil.aw_ready = (!axil_awvalid || axil_aw_accept);
        s_axil.w_ready = (!axil_wvalid || axil_aw_accept);
    end

    // Request dispatch
    always_comb begin
        cpuif_wr_data = axil_wdata;
        for(int i=0; i<4; i++) begin
            cpuif_wr_biten[i*8 +: 8] = {8{axil_wstrb[i]}};
        end
        cpuif_req = '0;
        cpuif_req_is_wr = '0;
        cpuif_addr = '0;
        axil_ar_accept = '0;
        axil_aw_accept = '0;

        if(axil_n_in_flight < 2'd2) begin
            // Can safely issue more transactions without overwhelming response buffer
            if(axil_arvalid && !axil_prev_was_rd) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[2:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end else if(axil_awvalid && axil_wvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '1;
                cpuif_addr = {axil_awaddr[2:2], 2'b0};
                if(!cpuif_req_stall_wr) axil_aw_accept = '1;
            end else if(axil_arvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[2:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end
        end
    end


    // AXI4-Lite Response Logic
    struct {
        logic is_wr;
        logic err;
        logic [31:0] rdata;
    } axil_resp_buffer[2];

    logic [1:0] axil_resp_wptr;
    logic [1:0] axil_resp_rptr;

    always_ff @(posedge clk) begin
        if(rst) begin
            for(int i=0; i<2; i++) begin
                axil_resp_buffer[i].is_wr <= '0;
                axil_resp_buffer[i].err <= '0;
                axil_resp_buffer[i].rdata <= '0;
            end
            axil_resp_wptr <= '0;
            axil_resp_rptr <= '0;
        end else begin
            // Store responses in buffer until AXI response channel accepts them
            if(cpuif_rd_ack || cpuif_wr_ack) begin
                if(cpuif_rd_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '0;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_rd_err;
                    axil_resp_buffer[axil_resp_wptr[0:0]].rdata <= cpuif_rd_data;

                end else if(cpuif_wr_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '1;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_wr_err;
                end
                axil_resp_wptr <= axil_resp_wptr + 1'b1;
            end

            // Advance read pointer when acknowledged
            if(axil_resp_acked) begin
                axil_resp_rptr <= axil_resp_rptr + 1'b1;
            end
        end
    end

    always_comb begin
        axil_resp_acked = '0;
        s_axil.b_valid = '0;
        s_axil.r_valid = '0;
        if(axil_resp_rptr != axil_resp_wptr) begin
            if(axil_resp_buffer[axil_resp_rptr[0:0]].is_wr) begin
                s_axil.b_valid = '1;
                if(s_axil.b_ready) axil_resp_acked = '1;
            end else begin
                s_axil.r_valid = '1;
                if(s_axil.r_ready) axil_resp_acked = '1;
            end
        end

        s_axil.r_data = axil_resp_buffer[axil_resp_rptr[0:0]].rdata;
        if(axil_resp_buffer[axil_resp_rptr[0:0]].err) begin
            s_axil.b_resp = 2'b10;
            s_axil.r_resp = 2'b10;
        end else begin
            s_axil.b_resp = 2'b00;
            s_axil.r_resp = 2'b00;
        end
    end

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic IDR;
        logic ODR;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.IDR = cpuif_req_masked & (cpuif_addr == 3'h0);
        decoded_reg_strb.ODR = cpuif_req_masked & (cpuif_addr == 3'h4);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } STATE;
        } IDR;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } STATE;
        } ODR;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [15:0] value;
            } STATE;
        } IDR;
        struct {
            struct {
                logic [15:0] value;
            } STATE;
        } ODR;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: sumermcu_gpio_reg.IDR.STATE
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.IDR.STATE.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.IDR.STATE.next;
        load_next_c = '1;
        field_combo.IDR.STATE.next = next_c;
        field_combo.IDR.STATE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.IDR.STATE.value <= 16'h0;
        end else begin
            if(field_combo.IDR.STATE.load_next) begin
                field_storage.IDR.STATE.value <= field_combo.IDR.STATE.next;
            end
        end
    end
    assign hwif_out.IDR.STATE.value = field_storage.IDR.STATE.value;
    // Field: sumermcu_gpio_reg.ODR.STATE
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ODR.STATE.value;
        load_next_c = '0;
        if(decoded_reg_strb.ODR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ODR.STATE.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.ODR.STATE.next = next_c;
        field_combo.ODR.STATE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ODR.STATE.value <= 16'h0;
        end else begin
            if(field_combo.ODR.STATE.load_next) begin
                field_storage.ODR.STATE.value <= field_combo.ODR.STATE.next;
            end
        end
    end
    assign hwif_out.ODR.STATE.value = field_storage.ODR.STATE.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[2];
    assign readback_array[0][15:0] = (decoded_reg_strb.IDR && !decoded_req_is_wr) ? field_storage.IDR.STATE.value : '0;
    assign readback_array[0][31:16] = '0;
    assign readback_array[1][15:0] = (decoded_reg_strb.ODR && !decoded_req_is_wr) ? field_storage.ODR.STATE.value : '0;
    assign readback_array[1][31:16] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<2; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
